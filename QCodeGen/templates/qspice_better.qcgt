//
// This QCodeGen template is functionally identical to the QSpice code
// generated with all code sections selected.  It is somewhat simplified
// with unnecessary "struct" declarations removed, calloc() replacing
// malloc(), and a few other small details.
//
// This file was generated using %%AppName%% %%AppVersion%%
// on %%DateTimeLong%% by %%Author%%
// from the QCodeGen template qspice_better.qcgt.
//
// To build with Digital Mars C++ Compiler:
//    dmc -mn -WD %%ComponentNameLC%%.cpp kernel32.lib
//

#include <malloc.h>
#include <stdarg.h>
#include <stdio.h>
#include <time.h>

union uData {
  bool                   b;
  char                   c;
  unsigned char          uc;
  short                  s;
  unsigned short         us;
  int                    i;
  unsigned int           ui;
  float                  f;
  double                 d;
  long long int          i64;
  unsigned long long int ui64;
  char                  *str;
  unsigned char         *bytes;
};

// int DllMain() must exist and return 1 for a process to load the .DLL
// See https://docs.microsoft.com/en-us/windows/win32/dlls/dllmain for more
// information.
int __stdcall DllMain(void *module, unsigned int reason, void *reserved) {
  return 1;
}

void display(const char *fmt, ...) {   // for diagnostic print statements
  msleep(30);
  fflush(stdout);
  va_list args = {0};
  va_start(args, fmt);
  vprintf(fmt, args);
  va_end(args);
  fflush(stdout);
  msleep(30);
}

// #undef pin names lest they collide with names in any header file(s) you might
// include.
%%Undef%%

struct InstData
  {
    // declare the structure here
  };

extern "C" __declspec(dllexport) void %%ComponentNameLC%%
    (InstData **opaque, double t, union uData *data) {
 %%UdataAll%%

    InstData *inst = *opaque;

  if (!inst) {
    inst = *opaque = (InstData *) calloc(1, sizeof(InstData));

    // add error handling if calloc() fail (optional)
  }

  // Implement module evaluation code here:
}

extern "C" __declspec(dllexport) double MaxExtStepSize(
   InstData *inst) {
   double abortSim = -1e308; // return abortSim value to terminate simulation
   
  return 1e308;   // implement a good choice of max timestep size that depends
                  // on struct InstData
}

extern "C" __declspec(dllexport) void Trunc(InstData *inst, double t,
    union uData *data,
    double *timestep) {   // limit the timestep to a tolerance if the circuit
                          // causes a change in struct InstData
  const double ttol = 1e-9;

  if (*timestep > ttol) {
    %%UdataOutput%%

    // Save output vector
    %%UdataSaveOutput%%

    InstData tmp = *inst;

    %%ComponentNameLC%%(&(&tmp), t, data);
    // if(tmp != *inst) // implement a meaningful way to detect if the state has
    // changed
    //    *timestep = ttol;

    // Restore output vector
    %%UdataRestoreOutput%%
  }
}

extern "C" __declspec(dllexport) void Destroy(InstData *inst) {
  free(inst);
}
